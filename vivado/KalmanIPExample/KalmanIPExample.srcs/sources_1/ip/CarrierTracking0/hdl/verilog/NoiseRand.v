// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module NoiseRand (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd0;
parameter    ap_ST_fsm_state2 = 4'd1;
parameter    ap_ST_fsm_state3 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd3;
parameter    ap_ST_fsm_state5 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd5;
parameter    ap_ST_fsm_state7 = 4'd6;
parameter    ap_ST_fsm_state8 = 4'd7;
parameter    ap_ST_fsm_state9 = 4'd8;
parameter    ap_ST_fsm_state10 = 4'd9;
parameter    ap_ST_fsm_state11 = 4'd10;
parameter    ap_ST_fsm_state12 = 4'd11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg   [3:0] ap_CS_fsm;
reg   [31:0] next_r;
wire   [63:0] grp_fu_69_p1;
reg   [63:0] reg_72;
wire   [31:0] mul_ln18_fu_83_p2;
reg   [31:0] mul_ln18_reg_354;
wire   [31:0] add_ln18_fu_89_p2;
wire   [63:0] tmp_i_pow_generic_double_s_fu_60_ap_return;
reg   [63:0] tmp_i_reg_364;
wire   [63:0] grp_fu_65_p2;
reg   [63:0] x_assign_reg_369;
reg   [0:0] tmp_10_reg_374;
wire   [14:0] trunc_ln19_fu_308_p1;
reg   [14:0] trunc_ln19_reg_379;
wire   [14:0] trunc_ln19_1_fu_312_p1;
reg   [14:0] trunc_ln19_1_reg_384;
wire    tmp_i_pow_generic_double_s_fu_60_ap_ready;
wire   [31:0] p_Val2_8_fu_230_p3;
reg  signed [31:0] grp_fu_69_p0;
wire  signed [31:0] mul_ln18_fu_83_p1;
wire   [63:0] p_Val2_s_fu_95_p1;
wire   [51:0] tmp_V_2_fu_116_p1;
wire   [53:0] mantissa_V_fu_120_p4;
wire   [10:0] tmp_V_fu_106_p4;
wire   [11:0] zext_ln502_fu_134_p1;
wire   [11:0] add_ln502_fu_138_p2;
wire   [10:0] sub_ln1311_fu_152_p2;
wire   [0:0] isNeg_fu_144_p3;
wire  signed [11:0] sext_ln1311_fu_158_p1;
wire   [11:0] ush_fu_162_p3;
wire  signed [31:0] sext_ln1311_1_fu_170_p1;
wire   [53:0] zext_ln1285_fu_178_p1;
wire   [136:0] zext_ln682_fu_130_p1;
wire   [136:0] zext_ln1287_fu_174_p1;
wire   [53:0] r_V_fu_182_p2;
wire   [0:0] tmp_7_fu_194_p3;
wire   [136:0] r_V_1_fu_188_p2;
wire   [31:0] zext_ln662_fu_202_p1;
wire   [31:0] tmp_2_fu_206_p4;
wire   [31:0] p_Val2_7_fu_216_p3;
wire   [0:0] p_Result_s_fu_98_p3;
wire   [31:0] result_V_1_fu_224_p2;
wire   [31:0] sub_ln19_fu_252_p2;
wire   [15:0] tmp_3_fu_258_p4;
wire   [16:0] zext_ln19_fu_268_p1;
wire   [15:0] tmp_4_fu_278_p4;
wire   [0:0] tmp_9_fu_244_p3;
wire   [16:0] sub_ln19_1_fu_272_p2;
wire   [16:0] zext_ln19_1_fu_288_p1;
wire   [16:0] select_ln19_fu_292_p3;
wire   [14:0] sub_ln19_2_fu_316_p2;
wire   [15:0] tmp_11_fu_321_p3;
wire   [15:0] sub_ln19_3_fu_329_p2;
wire   [15:0] tmp_8_fu_335_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd0;
#0 next_r = 32'd1;
end

pow_generic_double_s tmp_i_pow_generic_double_s_fu_60(
    .ap_ready(tmp_i_pow_generic_double_s_fu_60_ap_ready),
    .exp(reg_72),
    .ap_return(tmp_i_pow_generic_double_s_fu_60_ap_return)
);

CarrierTracking_dbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CarrierTracking_dbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_72),
    .din1(tmp_i_reg_364),
    .ce(1'b1),
    .dout(grp_fu_65_p2)
);

CarrierTracking_scud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
CarrierTracking_scud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_69_p0),
    .ce(1'b1),
    .dout(grp_fu_69_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b1))) begin
        mul_ln18_reg_354 <= mul_ln18_fu_83_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_state11 == ap_CS_fsm)) begin
        next_r <= p_Val2_8_fu_230_p3;
        tmp_10_reg_374 <= select_ln19_fu_292_p3[32'd16];
        trunc_ln19_1_reg_384 <= trunc_ln19_1_fu_312_p1;
        trunc_ln19_reg_379 <= trunc_ln19_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ST_fsm_state5 == ap_CS_fsm) | (ap_ST_fsm_state4 == ap_CS_fsm))) begin
        reg_72 <= grp_fu_69_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_state5 == ap_CS_fsm)) begin
        tmp_i_reg_364 <= tmp_i_pow_generic_double_s_fu_60_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ST_fsm_state10 == ap_CS_fsm)) begin
        x_assign_reg_369 <= grp_fu_65_p2;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state12 == ap_CS_fsm) | ((ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state12 == ap_CS_fsm)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
        grp_fu_69_p0 = add_ln18_fu_89_p2;
    end else if ((ap_ST_fsm_state1 == ap_CS_fsm)) begin
        grp_fu_69_p0 = next_r;
    end else begin
        grp_fu_69_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_89_p2 = (32'd12345 + mul_ln18_reg_354);

assign add_ln502_fu_138_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_134_p1));

assign ap_return = ((tmp_10_reg_374[0:0] === 1'b1) ? sub_ln19_3_fu_329_p2 : tmp_8_fu_335_p3);

assign isNeg_fu_144_p3 = add_ln502_fu_138_p2[32'd11];

assign mantissa_V_fu_120_p4 = {{{{1'd1}, {tmp_V_2_fu_116_p1}}}, {1'd0}};

assign mul_ln18_fu_83_p1 = next_r;

assign mul_ln18_fu_83_p2 = ($signed({{1'b0}, {32'd13515245}}) * $signed(mul_ln18_fu_83_p1));

assign p_Result_s_fu_98_p3 = p_Val2_s_fu_95_p1[32'd63];

assign p_Val2_7_fu_216_p3 = ((isNeg_fu_144_p3[0:0] === 1'b1) ? zext_ln662_fu_202_p1 : tmp_2_fu_206_p4);

assign p_Val2_8_fu_230_p3 = ((p_Result_s_fu_98_p3[0:0] === 1'b1) ? result_V_1_fu_224_p2 : p_Val2_7_fu_216_p3);

assign p_Val2_s_fu_95_p1 = x_assign_reg_369;

assign r_V_1_fu_188_p2 = zext_ln682_fu_130_p1 << zext_ln1287_fu_174_p1;

assign r_V_fu_182_p2 = mantissa_V_fu_120_p4 >> zext_ln1285_fu_178_p1;

assign result_V_1_fu_224_p2 = (32'd0 - p_Val2_7_fu_216_p3);

assign select_ln19_fu_292_p3 = ((tmp_9_fu_244_p3[0:0] === 1'b1) ? sub_ln19_1_fu_272_p2 : zext_ln19_1_fu_288_p1);

assign sext_ln1311_1_fu_170_p1 = $signed(ush_fu_162_p3);

assign sext_ln1311_fu_158_p1 = $signed(sub_ln1311_fu_152_p2);

assign sub_ln1311_fu_152_p2 = (11'd1023 - tmp_V_fu_106_p4);

assign sub_ln19_1_fu_272_p2 = (17'd0 - zext_ln19_fu_268_p1);

assign sub_ln19_2_fu_316_p2 = (15'd0 - trunc_ln19_1_reg_384);

assign sub_ln19_3_fu_329_p2 = (16'd0 - tmp_11_fu_321_p3);

assign sub_ln19_fu_252_p2 = (32'd0 - p_Val2_8_fu_230_p3);

assign tmp_11_fu_321_p3 = {{1'd0}, {sub_ln19_2_fu_316_p2}};

assign tmp_2_fu_206_p4 = {{r_V_1_fu_188_p2[84:53]}};

assign tmp_3_fu_258_p4 = {{sub_ln19_fu_252_p2[31:16]}};

assign tmp_4_fu_278_p4 = {{p_Val2_8_fu_230_p3[31:16]}};

assign tmp_7_fu_194_p3 = r_V_fu_182_p2[32'd53];

assign tmp_8_fu_335_p3 = {{1'd0}, {trunc_ln19_reg_379}};

assign tmp_9_fu_244_p3 = p_Val2_8_fu_230_p3[32'd31];

assign tmp_V_2_fu_116_p1 = p_Val2_s_fu_95_p1[51:0];

assign tmp_V_fu_106_p4 = {{p_Val2_s_fu_95_p1[62:52]}};

assign trunc_ln19_1_fu_312_p1 = select_ln19_fu_292_p3[14:0];

assign trunc_ln19_fu_308_p1 = select_ln19_fu_292_p3[14:0];

assign ush_fu_162_p3 = ((isNeg_fu_144_p3[0:0] === 1'b1) ? sext_ln1311_fu_158_p1 : add_ln502_fu_138_p2);

assign zext_ln1285_fu_178_p1 = $unsigned(sext_ln1311_1_fu_170_p1);

assign zext_ln1287_fu_174_p1 = $unsigned(sext_ln1311_1_fu_170_p1);

assign zext_ln19_1_fu_288_p1 = tmp_4_fu_278_p4;

assign zext_ln19_fu_268_p1 = tmp_3_fu_258_p4;

assign zext_ln502_fu_134_p1 = tmp_V_fu_106_p4;

assign zext_ln662_fu_202_p1 = tmp_7_fu_194_p3;

assign zext_ln682_fu_130_p1 = mantissa_V_fu_120_p4;

endmodule //NoiseRand
